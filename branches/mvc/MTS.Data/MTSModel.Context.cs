//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;

namespace MTS.Data
{
    public partial class MTSContext : DbContext
    {
        public MTSContext()
            : base("name=MTSContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Mirror> Mirrors { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<Operator> Operators { get; set; }
        public DbSet<Param> Params { get; set; }
        public DbSet<ParamOutput> ParamOutputs { get; set; }
        public DbSet<Shift> Shifts { get; set; }
        public DbSet<Test> Tests { get; set; }
        public DbSet<TestOutput> TestOutputs { get; set; }
        public DbSet<TestParam> TestParams { get; set; }
        public DbSet<TestShift> TestShifts { get; set; }
        public DbSet<MirrorResult> MirrorResults { get; set; }
        public DbSet<ShiftResult> ShiftResults { get; set; }
        public DbSet<MirrorRate> MirrorRates { get; set; }
        public DbSet<TestRate> TestRates { get; set; }
        public DbSet<OperatorResult> OperatorResults { get; set; }
    
        public virtual ObjectResult<DbTestResult> GetTestResult(Nullable<int> shiftId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(DbTestResult).Assembly);
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DbTestResult>("GetTestResult", shiftIdParameter);
        }
    
        public virtual ObjectResult<DbParamResult> GetParamResult(Nullable<int> testId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(DbParamResult).Assembly);
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DbParamResult>("GetParamResult", testIdParameter);
        }
    
        public virtual int DeleteShift(Nullable<int> shiftId)
        {
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteShift", shiftIdParameter);
        }
    
        public virtual int DeleteOperator(Nullable<int> operatorId)
        {
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("operatorId", operatorId) :
                new ObjectParameter("operatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOperator", operatorIdParameter);
        }
    
        public virtual int DeleteParamOutput(Nullable<int> paramOutputId)
        {
            var paramOutputIdParameter = paramOutputId.HasValue ?
                new ObjectParameter("paramOutputId", paramOutputId) :
                new ObjectParameter("paramOutputId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteParamOutput", paramOutputIdParameter);
        }
    
        public virtual ObjectResult<Param> AddParam(Nullable<int> testId, string name, string value, Nullable<byte> type, string unit)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Param).Assembly);
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(byte));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Param>("AddParam", testIdParameter, nameParameter, valueParameter, typeParameter, unitParameter);
        }
    
        public virtual ObjectResult<Param> AddParam(Nullable<int> testId, string name, string value, Nullable<byte> type, string unit, MergeOption mergeOption)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Param).Assembly);
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(byte));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Param>("AddParam", mergeOption, testIdParameter, nameParameter, valueParameter, typeParameter, unitParameter);
        }
    
        public virtual ObjectResult<Test> AddTest(string name, Nullable<int> shiftId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Test).Assembly);
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test>("AddTest", nameParameter, shiftIdParameter);
        }
    
        public virtual ObjectResult<Test> AddTest(string name, Nullable<int> shiftId, MergeOption mergeOption)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Test).Assembly);
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Test>("AddTest", mergeOption, nameParameter, shiftIdParameter);
        }
    
        public virtual ObjectResult<Shift> StartShift(Nullable<int> mirrorId, Nullable<int> operatorId)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Shift).Assembly);
    
            var mirrorIdParameter = mirrorId.HasValue ?
                new ObjectParameter("mirrorId", mirrorId) :
                new ObjectParameter("mirrorId", typeof(int));
    
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("operatorId", operatorId) :
                new ObjectParameter("operatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Shift>("StartShift", mirrorIdParameter, operatorIdParameter);
        }
    
        public virtual ObjectResult<Shift> StartShift(Nullable<int> mirrorId, Nullable<int> operatorId, MergeOption mergeOption)
        {
            ((IObjectContextAdapter)this).ObjectContext.MetadataWorkspace.LoadFromAssembly(typeof(Shift).Assembly);
    
            var mirrorIdParameter = mirrorId.HasValue ?
                new ObjectParameter("mirrorId", mirrorId) :
                new ObjectParameter("mirrorId", typeof(int));
    
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("operatorId", operatorId) :
                new ObjectParameter("operatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Shift>("StartShift", mergeOption, mirrorIdParameter, operatorIdParameter);
        }
    
        public virtual int FinishShift(Nullable<int> shiftId)
        {
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FinishShift", shiftIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddTestOutput(Nullable<byte> result, Nullable<short> sequence, Nullable<System.DateTime> start, Nullable<System.DateTime> finish, Nullable<int> testId, Nullable<int> shiftId)
        {
            var resultParameter = result.HasValue ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(byte));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("sequence", sequence) :
                new ObjectParameter("sequence", typeof(short));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var finishParameter = finish.HasValue ?
                new ObjectParameter("finish", finish) :
                new ObjectParameter("finish", typeof(System.DateTime));
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("testId", testId) :
                new ObjectParameter("testId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddTestOutput", resultParameter, sequenceParameter, startParameter, finishParameter, testIdParameter, shiftIdParameter);
        }
    }
}
