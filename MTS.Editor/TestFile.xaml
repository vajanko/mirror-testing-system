<base:DocumentItem x:Class="MTS.Editor.TestFile"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:base="clr-namespace:MTS.Base;assembly=MTS.Base"
    xmlns:local="clr-namespace:MTS.Editor"
    xmlns:blend="clr-namespace:VIBlend.WPF.Controls;assembly=VIBlend.WPF.Editors"
    Height="400" Width="400" x:Name="root" Title="{Binding ItemTitle, RelativeSource={RelativeSource self}}">
    <DockPanel LastChildFill="True" DataContext="{Binding Tests}">
        <DockPanel.Resources>
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Style>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="border" BorderThickness="3">
                                <ContentPresenter/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="Olive"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <EventSetter Event="PreviewGotKeyboardFocus" Handler="SelectCurrentItem"/>
            </Style>
        </DockPanel.Resources>
        <ListBox DockPanel.Dock="Left" ItemsSource="{Binding}" IsSynchronizedWithCurrentItem="True" MinWidth="150">
            <ListBox.ItemTemplate>
                <DataTemplate DataType="{x:Type ListBoxItem}">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox IsChecked="{Binding Enabled}" Margin="3,0"/>
                        <Label Content="{Binding Name}"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <!-- Main area where all controls for setting testing parameters are placed -->
        <ListBox ItemsSource="{Binding}" ScrollViewer.VerticalScrollBarVisibility="Auto"
                     DockPanel.Dock="Left" x:Name="testList" IsSynchronizedWithCurrentItem="True">
            <ListBox.Resources>
                <!-- Styles -->
                <Style TargetType="{x:Type base:UpDownButton}">
                    <Setter Property="MinWidth" Value="70"/>
                    <Setter Property="Value" Value="{Binding NumericValue, Mode=TwoWay}"/>
                    <Setter Property="MinValue" Value="{Binding MinValue}"/>
                    <Setter Property="MaxValue" Value="{Binding MaxValue}"/>
                    <Setter Property="Unit" Value="{Binding Unit}"/>
                </Style>

                <Style TargetType="{x:Type GridViewColumnHeader}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                                <Border Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Padding="3">
                                    <ContentPresenter/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="MinWidth" Value="150"/>
                </Style>

                <!-- Data templates: Here each type of parameter value has its own data template defined.
                         GUI is automatically generated from test and parameters collection. Values of controls 
                         inside data templates are bounded to parameters in collection (TwoWay mode) - so when
                         user change any value it's get synchronized -->
                <!-- UpDownButton for numeric parameter -->
                <DataTemplate DataType="{x:Type local:IntParam}">
                    <base:UpDownButton Decimals="0"/>
                </DataTemplate>
                <!-- UpDownButton for real numeric parameter -->
                <DataTemplate DataType="{x:Type local:DoubleParam}">
                    <base:UpDownButton Decimals="{Binding Decimals}"/>
                </DataTemplate>
                <!-- ChechBox for Boolean parameter -->
                <DataTemplate DataType="{x:Type local:BoolParam}">
                    <CheckBox IsChecked="{Binding BoolValue, Mode=TwoWay}">
                        <Label Content="{Binding Text}"/>
                        <!-- BoolParameterMetadata has additional property for check box description -->
                    </CheckBox>
                </DataTemplate>
                <!-- TextBox for string parameter -->
                <DataTemplate DataType="{x:Type local:StringParam}">
                    <TextBox Text="{Binding StringValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinWidth="140"/>
                </DataTemplate>
                <!-- ComboBox for enumerator parameter -->
                <DataTemplate DataType="{x:Type local:EnumParam}">
                    <ComboBox SelectedIndex="{Binding SelectedIndex, Mode=TwoWay}" ItemsSource="{Binding Values}" MinWidth="140"/>
                </DataTemplate>
                <!-- Add new data templates here if new type of parameter is necessary ... -->
            </ListBox.Resources>

            <!-- Items for this ListBox are Tests -->
            <!-- Each item (test) is displayed inside ListView -->
            <ListBox.ItemTemplate>
                <DataTemplate DataType="{x:Type local:TestValue}">
                    <!-- Test property Parameters is a dictionary - collection of <key,value> pairs. Because we only
                             want values, binding to Parameters.Values is used -->
                    <ListView ItemsSource="{Binding}" x:Name="testListView" SelectionMode="Single" LostKeyboardFocus="testListView_LostKeyboardFocus">
                        <ListView.ItemContainerStyle>
                            <Style TargetType="{x:Type ListViewItem}">
                                <Setter Property="Background" Value="Pink"/>
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                <Setter Property="Margin" Value="0,1"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                            <Border x:Name="border">
                                                <GridViewRowPresenter/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter TargetName="border" Property="Background" Value="Olive"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <EventSetter Event="PreviewGotKeyboardFocus" Handler="SelectCurrentItem"/>
                            </Style>
                        </ListView.ItemContainerStyle>
                        <ListView.View>
                            <GridView>
                                <!-- This name refers to test name -->
                                <GridViewColumn DisplayMemberBinding="{Binding Name}">
                                    <!-- This Name refers to parameters name -->
                                    <GridViewColumnHeader Content="{Binding Name}"/>
                                </GridViewColumn>
                                <GridViewColumn>
                                    <!-- Here no DisplayMemberBinding is used, so this column is bounded to entire parameter
                                             value and data templates are applied -->
                                    <GridViewColumnHeader>
                                        <!-- Test enabled/disabled checkbox -->
                                        <CheckBox IsChecked="{Binding Enabled}" Content="Enabled"/>
                                    </GridViewColumnHeader>
                                </GridViewColumn>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate>
                            <Label Content="{Binding Name}" BorderBrush="Gray" BorderThickness="1"/>
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                </GroupStyle>
            </ListBox.GroupStyle>
        </ListBox>
    </DockPanel>
</base:DocumentItem>
